
(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbTitle',function(){return{template:'<h1 ng-if="\'Level 1\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h1>\n<h2 ng-if="\'Level 2\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h2>\n<h3 ng-if="\'Level 3\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h3>\n<h4 ng-if="\'Level 4\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h4>\n<h5 ng-if="\'Level 5\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h5>\n<h6 ng-if="\'Level 6\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h6>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbDataTable',function(){return{controllerAs:'ctrl',controller:function PbDataTableCtrl($scope,$http,$log,$filter){var vm=this;Object.defineProperty(vm,'jsonData',{'get':function(){var data=$filter('filter')(this.data||[],$scope.properties.filter||undefined);if(vm.sortOptions.property===undefined||vm.sortOptions.direction===undefined){return data;}
return $filter('orderBy')(data,vm.sortOptions.property,vm.sortOptions.direction);},'set':function(data){this.data=data;}});this.sortOptions={property:($scope.properties.sortColumns||[])[0],direction:false};this.pagination={currentPage:1,total:0};this.hasMultiColumns=function(){return Array.isArray($scope.properties.columnsKey);};this.isSelectable=function(){return $scope.properties.isBound('selectedRow');};this.createRequest=function(){var params={c:$scope.properties.pageSize,p:this.pagination.currentPage-1||0,s:$scope.properties.filter};if(this.sortOptions.property){params.o=this.sortOptions.property+' '+(this.sortOptions.direction?'DESC':'ASC');}
return{url:this.removeHandledParams($scope.properties.apiUrl),transformResponse:$http.defaults.transformResponse.concat(transformResponse),params:angular.extend({},$scope.properties.params||{},params)};};this.removeHandledParams=function(url){return['c','p'].reduce(function(acc,param){return acc.replace(new RegExp('(&'+param+'=[^&#]*([&#])?)','g'),'$2').replace(new RegExp('[?]'+param+'=[^&#]*&?','g'),'?');},url||'');};this.updateResultsFromAPI=function(){if($scope.properties.apiUrl){$http(vm.createRequest()).then(function(response){vm.results=response.data.results;vm.pagination=response.data.pagination;}).catch(function(error){$log.error(error);});}};this.updateResultsFromJson=function(){var start=(vm.pagination.currentPage-1)*$scope.properties.pageSize;var end=vm.pagination.currentPage*$scope.properties.pageSize;vm.results=vm.jsonData.slice(start,end);};this.sortHandler=function(){this.updateResults();};this.paginationHandler=function(){this.updateResults();};this.selectRowHandler=function(row){if(this.isSelectable()){$scope.properties.selectedRow=row;}};this.isColumnSortable=function(index){return!!this.getSorter(index);};this.getSorter=function(index){if($scope.properties.type==='Variable'){return $scope.properties.columnsKey[index];}
if(angular.isArray($scope.properties.sortColumns)){var columnKey=$scope.properties.columnsKey[index];if(columnKey.indexOf("|")>0){columnKey=columnKey.substring(0,columnKey.indexOf("|")).trim();}
if($scope.properties.sortColumns.indexOf(columnKey)>-1){return columnKey;}}
return undefined;};function transformResponse(data,header){return{results:data,pagination:parseContentRange(header('Content-Range'))};}
function parseContentRange(strContentRange){if(strContentRange===null){return{};}
var arrayContentRange=strContentRange.split('/');var arrayIndexNumPerPage=arrayContentRange[0].split('-');return{total:parseInt(arrayContentRange[1],10),currentPage:parseInt(arrayIndexNumPerPage[0],10)+1};}
vm.updateResults=function(){if($scope.properties.type==='Variable'){vm.updateResultsFromJson();}else{vm.updateResultsFromAPI();}};$scope.$watch('[properties.pageSize, properties.apiUrl, properties.filter, properties.params]',resetPaginationAndUpdateResults,true);function resetPaginationAndUpdateResults(){vm.pagination={currentPage:1,total:vm.jsonData.length};vm.updateResults();}
$scope.$watchCollection('properties.content',function(data){if(!Array.isArray(data)){return;}
vm.jsonData=data;vm.pagination={currentPage:1,total:data.length};vm.updateResults();});},template:'<div class="table-responsive">\n    <table bonitable\n           sort-options="ctrl.sortOptions"\n           on-sort="ctrl.sortHandler()"\n           class="table table-striped" ng-class="{\'table-hover\': ctrl.isSelectable()}">\n        <thead>\n            <tr>\n                <th ng-repeat="header in properties.headers">\n                    <div ng-if="ctrl.isColumnSortable($index)" bo-sorter="{{ctrl.getSorter($index)}}">\n                            {{ header | uiTranslate }}\n                    </div>\n                    <div ng-if="!ctrl.isColumnSortable($index)">\n                        {{ header | uiTranslate }}\n                    </div>\n                </th>\n            </tr>\n        </thead>\n        <tbody ng-if="ctrl.hasMultiColumns()">\n        <tr ng-repeat="row in ctrl.results" ng-click="ctrl.selectRowHandler(row)"\n            ng-class="{\'info\': row === properties.selectedRow}">\n            <td ng-repeat="column in properties.columnsKey track by $index">\n                {{ $eval(column, row) | uiTranslate }}\n            </td>\n        </tr>\n        </tbody>\n        <tbody ng-if="!ctrl.hasMultiColumns()">\n        <tr ng-repeat="row in ctrl.results" ng-click="ctrl.selectRowHandler(row)"\n            ng-class="{\'info\': row === properties.selectedRow}">\n            <td> {{ row | uiTranslate }}</td>\n        </tr>\n        </tbody>\n    </table>\n    <div class="hidden-xs"\n         ng-repeat="options in [{\'maxSize\': 5, \'rotate\': false}]"\n         ng-include="\'/dataTable/pagination.html\'" >\n    </div>\n    <div class="visible-xs text-center"\n         ng-repeat="options in [{\'maxSize\': 3, \'rotate\': true}]"\n         ng-include="\'/dataTable/pagination.html\'" >\n    </div>\n\n    <script type="text/ng-template" id="/dataTable/pagination.html">\n        <pagination ng-if="ctrl.pagination.total > properties.pageSize"\n                    total-items="ctrl.pagination.total"\n                    items-per-page="properties.pageSize"\n                    direction-links="true"\n                    boundary-links="true"\n                    previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"\n                    rotate="{{options.rotate}}"\n                    max-size="{{options.maxSize}}"\n                    ng-model="ctrl.pagination.currentPage"\n                    ng-change="ctrl.paginationHandler()">\n        </pagination>\n    </script>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbText',function(){return{template:'<p ng-if="properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind-html="properties.text | uiTranslate"></p>\n<p ng-if="!properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind="properties.text | uiTranslate"></p>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbSelect',function(){return{controllerAs:'ctrl',controller:function PbSelectCtrl($scope,$parse,$log,widgetNameFactory,$timeout,$window,$element){var ctrl=this;function comparator(initialValue,item){return angular.equals(initialValue,ctrl.getValue(item));}
function createGetter(accessor){return accessor&&$parse(accessor);}
this.getLabel=createGetter($scope.properties.displayedKey)||function(item){return typeof item==='string'?item:JSON.stringify(item);};this.getValue=createGetter($scope.properties.returnedKey)||function(item){return item;};this.findSelectedItem=function(items){return items.filter(comparator.bind(null,$scope.properties.value)).map(function(item){return ctrl.getValue(item);})[0];};this.setSelectedValue=function(foundItem){$timeout(function(){if(angular.isDefined(foundItem)){$scope.properties.value=foundItem;}else{$scope.properties.value=null;}},0);};$scope.$watchCollection('properties.availableValues',function(items){if(Array.isArray(items)){var foundItem=ctrl.findSelectedItem(items);if($window.navigator&&$window.navigator.userAgent&&$window.navigator.userAgent.indexOf('MSIE 9')>=0){var option=document.createElement('option');var select=$element.find('select')[0];select.add(option,null);select.remove(select.options.length-1);}
$scope.properties.value=undefined;ctrl.setSelectedValue(foundItem);}});$scope.$watch('properties.value',function(value){if(angular.isDefined(value)&&value!==null){var items=$scope.properties.availableValues;if(Array.isArray(items)){var foundItem=ctrl.findSelectedItem(items);$timeout(function(){if(!angular.isDefined(foundItem)){$scope.properties.value=null;}},0);}}});this.name=widgetNameFactory.getName('pbSelect');if(!$scope.properties.isBound('value')){$log.error('the pbSelect property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}" >\n            <select\n                class="form-control"\n                name="{{ctrl.name}}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                ng-options="ctrl.getValue(option) as (ctrl.getLabel(option) | uiTranslate) for option in properties.availableValues"\n                ng-required="properties.required"\n                ng-disabled="properties.disabled">\n                <option style="display:none" value="">\n                    {{ properties.placeholder | uiTranslate }}\n                </option>\n            </select>\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbInput',function(){return{controllerAs:'ctrl',controller:function PbInputCtrl($scope,$log,widgetNameFactory){'use strict';this.name=widgetNameFactory.getName('pbInput');if(!$scope.properties.isBound('value')){$log.error('the pbInput property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}" ng-bind-html="properties.label | uiTranslate">\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n            <input\n                type="{{properties.type}}"\n                class="form-control"\n                placeholder="{{ properties.placeholder | uiTranslate }}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                name="{{ctrl.name}}"\n                ng-required="properties.required"\n                ng-minlength="properties.minLength"\n                ng-maxlength="properties.maxLength"\n                min="{{properties.min}}"\n                max="{{properties.max}}"\n                step="{{properties.step}}"\n                ng-readonly="properties.readOnly">\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbModalContainer',function(){return{controllerAs:'ctrl',controller:function PbModalContainerCtrl($scope,$log,$modal,modalService){var ctrl=this;$scope.currentModal=this;modalService.register($scope.properties.modalId,this);var modalInstances=[];ctrl.close=function(){if(modalInstances){modalInstances.pop().close();}else{console.log('No instance of modal to close');}}
ctrl.open=function(){var modalInstance=$modal.open({scope:$scope,size:$scope.properties.size,animation:$scope.properties.animation,ariaLabelledBy:'modal-title',ariaDescribedBy:'modal-body',templateUrl:$scope.properties.modalId+'-modalContent.html',appendTo:undefined});modalInstances.push(modalInstance);}},template:''};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbRadioButtons',function(){return{controllerAs:'ctrl',controller:function PbRadioBoxCtrl($scope,$parse,$log,widgetNameFactory){'use strict';var ctrl=this;function comparator(initialValue,item){return angular.equals(initialValue,ctrl.getValue(item));}
function createGetter(accessor){return accessor&&$parse(accessor);}
this.getLabel=createGetter($scope.properties.displayedKey)||function(item){return typeof item==='string'?item:JSON.stringify(item);};this.getValue=createGetter($scope.properties.returnedKey)||function(item){return item;};$scope.$watchCollection('properties.availableValues',function(items){if(Array.isArray(items)){var foundValue=items.filter(comparator.bind(null,$scope.properties.selectedValue)).reduce(function(acc,item){return ctrl.getValue(item);},undefined);if(foundValue){$scope.properties.selectedValue=foundValue;}}});this.name=widgetNameFactory.getName('pbRadioBox');if(!$scope.properties.isBound('selectedValue')){$log.error('the pbRadioBox property named "selectedValue" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n        {{ properties.label | uiTranslate }}\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n            <label ng-if="properties.inline" class="radio-inline" ng-repeat="option in properties.availableValues track by $index">\n                <input\n                    type="radio"\n                    name="{{ctrl.name}}"\n                    ng-model="properties.selectedValue"\n                    ng-value="ctrl.getValue(option)"\n                    ng-required="properties.required"\n                    ng-disabled="properties.disabled">\n                {{ (ctrl.getLabel(option) || option) | uiTranslate }}\n            </label>\n\n            <div ng-if="!properties.inline" class="radio" ng-repeat="option in properties.availableValues track by $index">\n                <label>\n                    <input\n                        type="radio"\n                        name="{{ctrl.name}}"\n                        ng-model="properties.selectedValue"\n                        ng-value="ctrl.getValue(option)"\n                        ng-required="properties.required"\n                        ng-disabled="properties.disabled">\n                    {{ (ctrl.getLabel(option) || option) | uiTranslate }}\n                </label>\n            </div>\n        </div>\n        <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbButton',function(){return{controllerAs:'ctrl',controller:function PbButtonCtrl($scope,$http,$location,$log,$window,localStorageService,modalService){'use strict';var vm=this;this.action=function action(){if($scope.properties.action==='Remove from collection'){removeFromCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Add to collection'){addToCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Start process'){startProcess();}else if($scope.properties.action==='Submit task'){submitTask();}else if($scope.properties.action==='Open modal'){closeModal($scope.properties.closeOnSuccess);openModal($scope.properties.modalId);}else if($scope.properties.action==='Close modal'){closeModal(true);}else if($scope.properties.url){doRequest($scope.properties.action,$scope.properties.url);}};function openModal(modalId){modalService.open(modalId);};function closeModal(shouldClose){if(shouldClose)
modalService.close();};function removeFromCollection(){if($scope.properties.collectionToModify){if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var index=-1;if($scope.properties.collectionPosition==='First'){index=0;}else if($scope.properties.collectionPosition==='Last'){index=$scope.properties.collectionToModify.length-1;}else if($scope.properties.collectionPosition==='Item'){index=$scope.properties.collectionToModify.indexOf($scope.properties.removeItem);}
if(index!==-1){$scope.properties.collectionToModify.splice(index,1);}}}
function addToCollection(){if(!$scope.properties.collectionToModify){$scope.properties.collectionToModify=[];}
if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var item=angular.copy($scope.properties.valueToAdd);if($scope.properties.collectionPosition==='First'){$scope.properties.collectionToModify.unshift(item);}else{$scope.properties.collectionToModify.push(item);}}
function startProcess(){var id=getUrlParam('id');if(id){var prom=doRequest('POST','../API/bpm/process/'+id+'/instantiation',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the process definition id value from the URL');}}
function doRequest(method,url,params){vm.busy=true;var req={method:method,url:url,data:angular.copy($scope.properties.dataToSend),params:params};return $http(req).success(function(data,status){$scope.properties.dataFromSuccess=data;$scope.properties.responseStatusCode=status;$scope.properties.dataFromError=undefined;notifyParentFrame({message:'success',status:status,dataFromSuccess:data,dataFromError:undefined,responseStatusCode:status});if($scope.properties.targetUrlOnSuccess&&method!=='GET'){redirectIfNeeded();}
closeModal($scope.properties.closeOnSuccess);}).error(function(data,status){$scope.properties.dataFromError=data;$scope.properties.responseStatusCode=status;$scope.properties.dataFromSuccess=undefined;notifyParentFrame({message:'error',status:status,dataFromError:data,dataFromSuccess:undefined,responseStatusCode:status});}).finally(function(){vm.busy=false;});}
function redirectIfNeeded(){var iframeId=$window.frameElement?$window.frameElement.id:null;if(!iframeId||iframeId&&iframeId.indexOf('bonitaframe')!==0){$window.location.assign($scope.properties.targetUrlOnSuccess);}}
function notifyParentFrame(additionalProperties){if($window.parent!==$window.self){var dataToSend=angular.extend({},$scope.properties,additionalProperties);$window.parent.postMessage(JSON.stringify(dataToSend),'*');}}
function getUserParam(){var userId=getUrlParam('user');if(userId){return{'user':userId};}
return{};}
function getUrlParam(param){var paramValue=$location.absUrl().match('[//?&]'+param+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}
function submitTask(){var id;id=getUrlParam('id');if(id){doRequest('POST','../API/bpm/userTask/'+getUrlParam('id')+'/execution',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the task id value from the URL');}}},template:'<div class="text-{{ properties.alignment }}">\n    <button\n        ng-class="\'btn btn-\' + properties.buttonStyle"\n        ng-click="ctrl.action()"\n        type="button"\n        ng-disabled="properties.disabled || ctrl.busy" ng-bind-html="properties.label | uiTranslate"></button>\n</div>\n'};});